import 'package:dio/dio.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:retrofit/retrofit.dart';

/*
The following is a reference to a file generated by the build_runner.
Some code, that corresponds to these annotations will be generated and this file
is where such code is written. `part` is the directive that we can use to link
these two files together. Compiler will treat these files as a single file. Note
the use of `part of` directive that effectively work as a link from *.g.dart to
this file.
 */
part 'world_time_api.g.dart';

/*
* API information that retrofit uses to construct the HTTP request and
* parsing the response. Note the use of annotations to mark this as a REST API,
* and define the base URL of the API.
*/
@RestApi(baseUrl: 'https://worldtimeapi.org')
abstract class WorldTimeApi {
  factory WorldTimeApi(Dio dio, {String baseUrl}) = _WorldTimeApi;

  // Note the use of annotation to define the HTTP method and the resource path
  @GET('/api/timezone/{continent}/{city}')
  Future<TimeAtLocation> getTimeAtLocation(
      @Path("continent") String continent, // Note the use of annotation to denote the path variable
      @Path("city") String city);
}

/*
* This is the class that the HTTP response in the above API class,
* is deserialised into.
 */
@JsonSerializable()
class TimeAtLocation {
  const TimeAtLocation({required this.timeOffset, required this.timestamp});

  factory TimeAtLocation.fromJson(Map<String, dynamic> json) => _$TimeAtLocationFromJson(json);
  /*
  * Note the use of annotation to denote name of the key in the JSON whose value will be assigned to this property
  */
  @JsonKey(name: 'utc_offset')
  final String timeOffset;

  @JsonKey(name: 'datetime')
  final String timestamp;

  Map<String, dynamic> toJson() => _$TimeAtLocationToJson(this);
}